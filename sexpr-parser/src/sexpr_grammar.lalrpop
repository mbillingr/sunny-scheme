use std::str::FromStr;
use crate::{Context, Sexpr};

grammar;

pub Datum: Context<Sexpr<'input>> = {
    <l:@L> <x:RawSexpr> <r:@R> => Context::span(l..r, x),
};

pub RawSexpr: Sexpr<'input> = {
    <b:Bool> => Sexpr::bool(b),
    <n:Num> => Sexpr::int(n),
    <s:Sym> => Sexpr::symbol(s),
    <s:Str> => Sexpr::string(s),
    <p:Pair> => Sexpr::cons(p.0, p.1),
    <l:List> => <>,
    <q:Quotation> => <>,
};

Bool: bool = {
    "#t" => true,
    "#f" => false,
}

Num: i64 = <s:r"[0-9]+"> => i64::from_str(s).unwrap();

Sym: &'input str = <s:r"[a-zA-Z:!-]([a-zA-Z0-9:!-])*"> => s;

Str: &'input str = {
    <s:r#""[^"]*""#> => &s[1..s.len()-1],
 };

Pair: (Context<Sexpr<'input>>, Context<Sexpr<'input>>) = {
    "(" <car:Datum> "." <cdr:Datum> ")" => (car, cdr)
};

List: Sexpr<'input> = {
    "(" ")" => Sexpr::nil(),
    "(" <Sequence> ")" => <>,
};

Sequence: Sexpr<'input> = {
    <car:Datum> <l:@L> <cdr:Sequence> <r:@R> => Sexpr::cons(car, Context::span(l..r, cdr)),
    <car:Datum> => Sexpr::cons(car, Sexpr::nil()),
};

Quotation: Sexpr<'input> = {
    <l:@L> "'" <r:@R> <x:Datum> => Sexpr::list(vec![Context::span(l..r, Sexpr::symbol("quote")), x].into_iter())
};
