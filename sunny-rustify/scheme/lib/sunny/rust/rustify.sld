(define-library (sunny rust rustify)
  (export rustify-identifier
          rustify-libname
          rustify-testname)

  (import (scheme base)
          (sunny utils))

  (begin
    (define (rustify-identifier name)
      (define (char-map ch)
        (cond ((eq? ch #\_) "__")
              ((eq? ch #\?) "_p")
              ((eq? ch #\!) "_i")
              ((eq? ch #\<) "_l_")
              ((eq? ch #\>) "_g_")
              ((eq? ch #\=) "_e_")
              ((eq? ch #\-) "_minus_")
              ((eq? ch #\+) "_plus_")
              ((eq? ch #\*) "_star_")
              ((eq? ch #\/) "_slash_")
              (else (list->string (list ch)))))
      (define (append-all strs)
        (if (null? strs)
            ""
            (string-append (car strs) (append-all (cdr strs)))))
      (cond ((eq? name 'args) "args_")
            ((eq? name 'fn) "fn_")
            ((eq? name 'loop) "loop_")
            ((eq? name 'let) "let_")
            ((eq? name 'mut) "mut_")
            ((eq? name 'ref) "ref_")
            ((eq? name 'self) "self_")
            (else (append-all (map char-map (string->list (if (symbol? name) (symbol->string name) name)))))))

    (define (rustify-libname name)
      (define (char-map ch)
        (cond ((eq? ch #\_) "__")
              ((eq? ch #\-) "_")
              (else (list->string (list ch)))))
      (define (append-all strs)
        (if (null? strs)
            ""
            (string-append (car strs) (append-all (cdr strs)))))
      (let ((name (if (symbol? name)
                      (symbol->string name)
                      name)))
        (cond ((eq? name 'fn) "fn_")
              (else (append-all (map char-map (string->list name)))))))

    (define (rustify-testname name)
      (define (char-map ch)
        (cond ((eq? ch #\space) "_")
              ((eq? ch #\') #f)
              (else (list->string (list ch)))))
      (define (append-all strs)
        (if (null? strs)
            ""
            (string-append (car strs) (append-all (cdr strs)))))
      (append-all (filter (lambda (x) x)
                          (map char-map (string->list name)))))))
