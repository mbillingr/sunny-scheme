(define-library (sunny ast)
  (export make-alternative
          make-assignment
          make-comment
          make-constant
          make-nop
          make-reference)

  (import (scheme base)
          (sunny sets)
          (sunny rust module)
          (sunny rust rustify)
          (sunny variable))

  (begin
    (define (make-comment comment node)
      (define (repr)
        (cons 'COMMENT
              (cons comment
                    (node 'repr))))
      (define (transform func)
        (func self (lambda () (make-comment comment
                                            (node 'transform func)))))
      (define (free-vars)
        (node 'free-vars))
      (define (gen-rust module)
        (println module)
        (print module "// ")
        (showln module comment)
        (node 'gen-rust module))
      (define (self msg . args)
        (cond ((eq? 'repr msg) (print))
              ((eq? 'transform msg) (transform (car args)))
              ((eq? 'free-vars msg) (free-vars))
              ((eq? 'kind msg) 'COMMENT)
              ((eq? 'gen-rust msg) (gen-rust (car args)))
              (else (error "Unknown message COMMENT" msg))))
      self)

    (define (make-nop)
      (define (repr) '(NOP))
      (define (transform func) (func self (lambda () self)))
      (define (free-vars) (make-set))
      (define (gen-rust module) (print module "(/*NOP*/)"))
      (define (self msg . args)
        (cond ((eq? 'repr msg) (print))
              ((eq? 'transform msg) (transform (car args)))
              ((eq? 'free-vars msg) (free-vars))
              ((eq? 'kind msg) 'NOP)
              ((eq? 'gen-rust msg) (gen-rust (car args)))
              (else (error "Unknown message NOP" msg))))
      self)

    (define (make-constant val)
      (define (repr)
        (cons 'CONSTANT
              val))
      (define (transform func)
        (func self (lambda () self)))
      (define (free-vars)
        (make-set))
      (define (gen-constant module val)
        (cond ((null? val) (print module "Scm::Nil"))
              ((eq? val #t) (print module "Scm::True"))
              ((eq? val #f) (print module "Scm::False"))
              ((symbol? val) (print module "Scm::symbol(\"" val "\")"))
              ((eq? val #\') (print module "Scm::char('\\'')"))
              ((char? val) (print module "Scm::char('" val "')"))
              ((pair? val) (print module "Scm::pair(")
                           (gen-constant module (car val))
                           (print module ", ")
                           (gen-constant module (cdr val))
                           (print module ")"))
              (else (print module "Scm::from(")
                    (show module val)
                    (print module ")"))))
      (define (gen-rust module)
        (gen-constant module val))
      (define (self msg . args)
        (cond ((eq? 'repr msg) (print))
              ((eq? 'transform msg) (transform (car args)))
              ((eq? 'free-vars msg) (free-vars))
              ((eq? 'kind msg) 'CONSTANT)
              ((eq? 'gen-rust msg) (gen-rust (car args)))
              (else (error "Unknown message CONSTANT" msg))))
      self)

    (define (make-reference name var)
      (define (global?)
        (if (eq? 'GLOBAL-REF (variable-getter var))
            #t
            (eq? 'IMPORT-REF (variable-getter var))))
      (define (repr)
        (list (variable-getter var) name))
      (define (transform func)
        (func self (lambda () self)))
      (define (free-vars)
        (if (global?)
            (make-set)
            (set-add (make-set)
                     name)))
      (define (gen-rust module)
        (let ((getter (variable-getter var)))
          (cond ((eq? 'GLOBAL-REF getter)
                 (print module
                        "globals::"
                        (rustify-identifier name)
                        ".with(|value| value.get())"))
                ((eq? 'IMPORT-REF getter)
                 (print module
                        "imports::"
                        (rustify-identifier name)
                        ".with(|value| value.get())"))
                ((eq? 'BOXED-REF getter)
                 (print module (rustify-identifier name) ".get()"))
                (else
                  (print module (rustify-identifier name) ".clone()")))))
      (define (self msg . args)
        (cond ((eq? 'repr msg) (print))
              ((eq? 'transform msg) (transform (car args)))
              ((eq? 'free-vars msg) (free-vars))
              ((eq? 'kind msg) 'REFERENCE)
              ((eq? 'gen-rust msg) (gen-rust (car args)))
              (else (error "Unknown message REFERENCE" msg))))
      self)

    (define (make-assignment name var val)
      (define (repr)
        (list (variable-setter var) name (val 'repr)))
      (define (transform func)
        (func self
              (lambda () (make-assignment name
                                          var
                                          (val 'transform func)))))
      (define (free-vars)
        (set-add (val 'free-vars)
                 name))
      (define (gen-rust module)
        (let ((setter (variable-setter var)))
          (cond ((eq? 'GLOBAL-SET setter)
                 (print module
                        "globals::"
                        (rustify-identifier name)
                        ".with(|value| value.set(")
                 (val 'gen-rust module)
                 (print module "))"))
                ((eq? 'BOXED-SET setter)
                 (print module (rustify-identifier name) ".set(")
                 (val 'gen-rust module)
                 (print module ")"))
                (else (error "set! on unboxed variable")))))
      (define (self msg . args)
        (cond ((eq? 'repr msg) (print))
              ((eq? 'transform msg) (transform (car args)))
              ((eq? 'free-vars msg) (free-vars))
              ((eq? 'kind msg) 'ASSIGNMENT)
              ((eq? 'gen-rust msg) (gen-rust (car args)))
              (else (error "Unknown message ASSIGNMENT" msg))))
      self)

    (define (make-alternative condition consequent alternative)
      (define (repr)
        (list 'IF (condition 'repr) (consequent 'repr) (alternative 'repr)))
      (define (transform func)
        (func self (lambda ()
                     (make-alternative (condition 'transform func)
                                       (consequent 'transform func)
                                       (alternative 'transform func)))))
      (define (free-vars)
        (set-union
          (set-union (condition 'free-vars)
                     (consequent 'free-vars))
          (alternative 'free-vars)))
      (define (gen-rust module)
        (print module "if (")
        (condition 'gen-rust module)
        (print module ").is_true() {")
        (consequent 'gen-rust module)
        (print module "} else ")
        (if (eq? (alternative 'kind) 'ALTERNATIVE)
            (alternative 'gen-rust module)
            (begin
              (print module "{")
              (alternative 'gen-rust module)
              (print module "}"))))
      (define (self msg . args)
        (cond ((eq? 'repr msg) (print))
              ((eq? 'transform msg) (transform (car args)))
              ((eq? 'free-vars msg) (free-vars))
              ((eq? 'kind msg) 'ALTERNATIVE)
              ((eq? 'gen-rust msg) (gen-rust (car args)))
              (else (error "Unknown message ALTERNATIVE" msg))))
      self)))
