use std::borrow::Cow;
use std::str::FromStr;
use crate::parser::unescape;
use crate::Sexpr;
use crate::source_location::SourceLocation;

grammar<'a>(context: &'a SourceLocation<()>);

match {
    r"\s*" => { }, // The default whitespace skipping is disabled an `ignore pattern` is specified
    r";[^\n\r]*[\n\r]*" => { }, // Skip line comments starting with `;`
    _
}

pub ExplicitSequence: Vec<SourceLocation<Sexpr>> = {
    <cd:OptionalDatum*> => cd.into_iter().filter_map(|x|x).collect(),
};

OptionalDatum: Option<SourceLocation<Sexpr>> = {
    CommentedDatum => None,
    <d:Datum> => Some(d),
};

CommentedDatum: () = {
    "#;" Datum => (),
};

Datum: SourceLocation<Sexpr> = {
    <l:@L> <x:RawSexpr> <r:@R> => context.clone().with_span(l..r).map_value(x),
};

RawSexpr: Sexpr = {
    <b:Bool> => Sexpr::bool(b),
    <n:Num> => Sexpr::int(n),
    <s:Sym> => Sexpr::symbol(&s),
    <s:Str> => Sexpr::string(s),
    <l:List> => <>,
    <q:Quotation> => <>,
};

Bool: bool = {
    "#t" => true,
    "#f" => false,
}

Num: i64 = <s:r"[0-9]+"> => i64::from_str(s).unwrap();

Sym: Cow<'input, str> = {
    <s:r"[a-zA-Z!$%&*+./:<=>?@^_~-]([^\s\(\)])*"> => Cow::Borrowed(s),
    <s:r"\|(\\\||[^|])*\|"> =>? unescape(&s[1..s.len()-1]),
}

Str: &'input str = {
    <s:r#""[^"]*""#> => &s[1..s.len()-1],
};

List: Sexpr = {
    "(" ")" => Sexpr::nil(),
    "(" <Sequence> ")" => <>,
};

Sequence: Sexpr = {
    <car:CommentedDatum> <seq:Sequence> => seq,
    <car:Datum> <l:@L> <cdr:Sequence> <r:@R> => Sexpr::cons(car, context.clone().with_span(l..r).map_value(cdr)),
    <car:Datum> "." <cdr:Datum> => Sexpr::cons(car, cdr),
    <car:Datum> => Sexpr::cons(car, Sexpr::nil()),
};

Quotation: Sexpr = {
    <l:@L> "'" <r:@R> <x:Datum> => Sexpr::list(vec![context.clone().with_span(l..r).map_value(Sexpr::symbol("quote")), x].into_iter())
};
